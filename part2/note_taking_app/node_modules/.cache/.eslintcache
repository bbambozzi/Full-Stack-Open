[{"/home/jbb/Documents/Web_Dev/Full-Stack-Open/part2/note_taking_app/src/index.js":"1","/home/jbb/Documents/Web_Dev/Full-Stack-Open/part2/note_taking_app/src/App.js":"2","/home/jbb/Documents/Web_Dev/Full-Stack-Open/part2/note_taking_app/src/components/Note.js":"3","/home/jbb/Documents/Web_Dev/Full-Stack-Open/part2/note_taking_app/src/services/notes.js":"4"},{"size":563,"mtime":1661449058454,"results":"5","hashOfConfig":"6"},{"size":2429,"mtime":1661980203715,"results":"7","hashOfConfig":"6"},{"size":243,"mtime":1661864807275,"results":"8","hashOfConfig":"6"},{"size":654,"mtime":1661875705855,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"vbwi2j",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/jbb/Documents/Web_Dev/Full-Stack-Open/part2/note_taking_app/src/index.js",[],[],[],"/home/jbb/Documents/Web_Dev/Full-Stack-Open/part2/note_taking_app/src/App.js",["24"],[],"/home/jbb/Documents/Web_Dev/Full-Stack-Open/part2/note_taking_app/src/components/Note.js",[],[],"/home/jbb/Documents/Web_Dev/Full-Stack-Open/part2/note_taking_app/src/services/notes.js",["25"],[],"// Make an axios-type note services which handles URL requests and avoids bloat on main App.\nimport axios from 'axios';\n\n\nconst baseURL = `http://localhost:3001/notes`\n\n\nconst getAll = () => {\n  const request = axios.get(baseURL)\n  return request.then((response) => {\n    return response.data;\n  })\n\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseURL, newObject)\n  return request.then((response) => response.data)\n}\n\nconst update = (newObject) => {\n  const request = axios.put(`${baseURL}/${newObject.id}`, newObject)\n  return request.then((response) => {\n    return response.data\n  })\n}\n\n\nexport default { getAll, create, update, }\n",{"ruleId":"26","severity":1,"message":"27","line":41,"column":56,"nodeType":"28","messageId":"29","endLine":41,"endColumn":58},{"ruleId":"30","severity":1,"message":"31","line":29,"column":1,"nodeType":"32","endLine":29,"endColumn":43},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration"]