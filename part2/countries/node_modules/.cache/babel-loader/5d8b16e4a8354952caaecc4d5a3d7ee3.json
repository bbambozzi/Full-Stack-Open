{"ast":null,"code":"var _jsxFileName = \"/home/jbb/Documents/Web_Dev/Full-Stack-Open/part2/countries/src/components/WeatherDisplay.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WeatherDisplay = props => {\n  _s();\n\n  const [getApiKey, setApikey] = useState(process.env.REACT_APP_API_KEY);\n  const [getCoordinates, setCoordinates] = useState(props.coordinates);\n  const [getWeatherData, setWeatherData] = useState('');\n  const [getImage, setImage] = useState( /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No matching image found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 41\n  }, this));\n  const [getDescription, setDescription] = useState( /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Hmm, today is a mystery\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 53\n  }, this)); // OpenWeather API KEY\n  // IMPORTANT! DO NOT OVERWRITE! Set as env variable instead!\n  // In bash: REACT_APP_API_KEY=\"VALUEHERE\" && NPM START\n\n  useEffect(() => {\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${getCoordinates[0]}&lon=${getCoordinates[1]}&appid=${getApiKey}`).then(response => {\n      const getAnswer = response.data;\n      setWeatherData(getAnswer);\n    });\n  }, []);\n  useEffect(() => {\n    setCoordinates(props.coordinates);\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${getCoordinates[0]}&lon=${getCoordinates[1]}&appid=${getApiKey}`).then(response => {\n      const getAnswer = response.data;\n      setWeatherData(getAnswer);\n    }).then(() => {\n      console.log(`after prop change, this fired and we got ${getWeatherData.base}`);\n    });\n  }, [props]);\n  useEffect(() => {// const iconURL = getWeatherData.weather[0].icon\n    // const desc = getWeatherData.weather[0].description;\n    // setImage(<img src={`https://openweathermap.org/img/wn/${iconURL}@2x.png`} />)\n    // setDescription(<p>Today is looking like a {desc} type of day.</p>)\n  }, [getWeatherData]);\n\n  const kevinToCelcius = kelvins => {\n    return (kelvins - 273.5).toFixed(2);\n  };\n\n  const ShowLatitudes = props => {\n    const coordArray = props.coordArray;\n    return /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Latitude is \", coordArray[0], \" and longiitude is \", coordArray[1]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }; // <p>The current temperature is {kevinToCelcius(getWeatherData.main.temp)}°</p>\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ShowLatitudes, {\n        coordArray: getCoordinates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 10\n      }, this)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: getImage\n    }, void 0, false), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: getDescription\n    }, void 0, false)]\n  }, void 0, true);\n};\n\n_s(WeatherDisplay, \"Y7RkQBm1emoK3v7wi6Nsi6uvIVM=\");\n\n_c = WeatherDisplay;\nexport default WeatherDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherDisplay\");","map":{"version":3,"names":["useState","useEffect","axios","WeatherDisplay","props","getApiKey","setApikey","process","env","REACT_APP_API_KEY","getCoordinates","setCoordinates","coordinates","getWeatherData","setWeatherData","getImage","setImage","getDescription","setDescription","get","then","response","getAnswer","data","console","log","base","kevinToCelcius","kelvins","toFixed","ShowLatitudes","coordArray"],"sources":["/home/jbb/Documents/Web_Dev/Full-Stack-Open/part2/countries/src/components/WeatherDisplay.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst WeatherDisplay = (props) => {\n  const [getApiKey, setApikey] = useState(process.env.REACT_APP_API_KEY)\n  const [getCoordinates, setCoordinates] = useState(props.coordinates);\n  const [getWeatherData, setWeatherData] = useState('');\n  const [getImage, setImage] = useState(<p>No matching image found</p>);\n  const [getDescription, setDescription] = useState(<p>Hmm, today is a mystery</p>)\n\n  // OpenWeather API KEY\n  // IMPORTANT! DO NOT OVERWRITE! Set as env variable instead!\n  // In bash: REACT_APP_API_KEY=\"VALUEHERE\" && NPM START\n\n\n  useEffect(() => {\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${getCoordinates[0]}&lon=${getCoordinates[1]}&appid=${getApiKey}`).then(response => {\n      const getAnswer = response.data;\n      setWeatherData(getAnswer)\n    })\n  }, [])\n\n\n  useEffect(() => {\n    setCoordinates(props.coordinates);\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${getCoordinates[0]}&lon=${getCoordinates[1]}&appid=${getApiKey}`).then((response) => {\n      const getAnswer = response.data;\n      setWeatherData(getAnswer);\n    }).then(() => {\n      console.log(`after prop change, this fired and we got ${getWeatherData.base}`)\n    })\n  }, [props])\n\n  useEffect(() => {\n    // const iconURL = getWeatherData.weather[0].icon\n    // const desc = getWeatherData.weather[0].description;\n    // setImage(<img src={`https://openweathermap.org/img/wn/${iconURL}@2x.png`} />)\n    // setDescription(<p>Today is looking like a {desc} type of day.</p>)\n  }, [getWeatherData])\n\n\n  const kevinToCelcius = (kelvins) => {\n    return (kelvins - 273.5).toFixed(2);\n  }\n\n  const ShowLatitudes = (props) => {\n    const coordArray = props.coordArray;\n    return (\n      <h4>Latitude is {coordArray[0]} and longiitude is {coordArray[1]}</h4>\n    )\n\n  }\n\n  // <p>The current temperature is {kevinToCelcius(getWeatherData.main.temp)}°</p>\n  return (\n    <>\n      <>\n        {<ShowLatitudes coordArray={getCoordinates} />}\n      </>\n      <>\n      </>\n      <>\n        {getImage}\n      </>\n      <>\n        {getDescription}\n      </>\n    </>\n  );\n};\n\nexport default WeatherDisplay;\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;EAAA;;EAChC,MAAM,CAACC,SAAD,EAAYC,SAAZ,IAAyBN,QAAQ,CAACO,OAAO,CAACC,GAAR,CAAYC,iBAAb,CAAvC;EACA,MAAM,CAACC,cAAD,EAAiBC,cAAjB,IAAmCX,QAAQ,CAACI,KAAK,CAACQ,WAAP,CAAjD;EACA,MAAM,CAACC,cAAD,EAAiBC,cAAjB,IAAmCd,QAAQ,CAAC,EAAD,CAAjD;EACA,MAAM,CAACe,QAAD,EAAWC,QAAX,IAAuBhB,QAAQ,eAAC;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAD,CAArC;EACA,MAAM,CAACiB,cAAD,EAAiBC,cAAjB,IAAmClB,QAAQ,eAAC;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAD,CAAjD,CALgC,CAOhC;EACA;EACA;;EAGAC,SAAS,CAAC,MAAM;IACdC,KAAK,CAACiB,GAAN,CAAW,uDAAsDT,cAAc,CAAC,CAAD,CAAI,QAAOA,cAAc,CAAC,CAAD,CAAI,UAASL,SAAU,EAA/H,EAAkIe,IAAlI,CAAuIC,QAAQ,IAAI;MACjJ,MAAMC,SAAS,GAAGD,QAAQ,CAACE,IAA3B;MACAT,cAAc,CAACQ,SAAD,CAAd;IACD,CAHD;EAID,CALQ,EAKN,EALM,CAAT;EAQArB,SAAS,CAAC,MAAM;IACdU,cAAc,CAACP,KAAK,CAACQ,WAAP,CAAd;IACAV,KAAK,CAACiB,GAAN,CAAW,uDAAsDT,cAAc,CAAC,CAAD,CAAI,QAAOA,cAAc,CAAC,CAAD,CAAI,UAASL,SAAU,EAA/H,EAAkIe,IAAlI,CAAwIC,QAAD,IAAc;MACnJ,MAAMC,SAAS,GAAGD,QAAQ,CAACE,IAA3B;MACAT,cAAc,CAACQ,SAAD,CAAd;IACD,CAHD,EAGGF,IAHH,CAGQ,MAAM;MACZI,OAAO,CAACC,GAAR,CAAa,4CAA2CZ,cAAc,CAACa,IAAK,EAA5E;IACD,CALD;EAMD,CARQ,EAQN,CAACtB,KAAD,CARM,CAAT;EAUAH,SAAS,CAAC,MAAM,CACd;IACA;IACA;IACA;EACD,CALQ,EAKN,CAACY,cAAD,CALM,CAAT;;EAQA,MAAMc,cAAc,GAAIC,OAAD,IAAa;IAClC,OAAO,CAACA,OAAO,GAAG,KAAX,EAAkBC,OAAlB,CAA0B,CAA1B,CAAP;EACD,CAFD;;EAIA,MAAMC,aAAa,GAAI1B,KAAD,IAAW;IAC/B,MAAM2B,UAAU,GAAG3B,KAAK,CAAC2B,UAAzB;IACA,oBACE;MAAA,2BAAiBA,UAAU,CAAC,CAAD,CAA3B,yBAAmDA,UAAU,CAAC,CAAD,CAA7D;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAID,CAND,CA1CgC,CAkDhC;;;EACA,oBACE;IAAA,wBACE;MAAA,uBACG,QAAC,aAAD;QAAe,UAAU,EAAErB;MAA3B;QAAA;QAAA;QAAA;MAAA;IADH,iBADF,eAIE,qCAJF,eAME;MAAA,UACGK;IADH,iBANF,eASE;MAAA,UACGE;IADH,iBATF;EAAA,gBADF;AAeD,CAlED;;GAAMd,c;;KAAAA,c;AAoEN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}